// breakpoints mixins
// ######################################################################
@mixin xs {
    @media (min-width: #{$breakpoint-xs}) {
        @content;
    }
}

// Small devices
@mixin sm {
    @media screen and (min-width: #{$breakpoint-sm}) {
        @content;
    }
}

// Medium devices
@mixin md {
    @media screen and (min-width: #{$breakpoint-md}) {
        @content;
    }
}

// Large devices
@mixin lg {
    @media screen and (min-width: #{$breakpoint-lg}) {
        @content;
    }
}

// Extra large devices
@mixin xl {
    @media screen and (min-width: #{$breakpoint-xl}) {
        @content;
    }
}


@mixin breakpoint-min($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        // Prints a media query based on the value
        @media (min-width: map-get($breakpoints, $breakpoint)) {
            @content;
        }
    }
    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
          + "Available breakpoints are: #{map-keys($breakpoints)}.";
    }
}

@mixin breakpoint-max($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        // Prints a media query based on the value
        @media (max-width: map-get($breakpoints, $breakpoint)) {
            @content;
        }
    }
    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
          + "Available breakpoints are: #{map-keys($breakpoints)}.";
    }
}

// ######################################################################

@mixin padding($tb, $lr, $pad: (0, 0, 0, 0), $important: null) {
    @if $important {
        $important: "!important";
    }

    padding: ($tb + nth($pad, 1)) ($lr + nth($pad, 2)) max(0.1em, $tb - $element-margin + nth($pad, 3))
        ($lr + nth($pad, 4)) #{$important};
}
